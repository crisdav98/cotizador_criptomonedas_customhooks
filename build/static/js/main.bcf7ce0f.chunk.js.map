{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","MensajeError","p","Error","mensaje","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listaCripto","guardarListaCripto","error","guardarError","criptomoneda","SelectCripto","moneda","SelectMonedas","useEffect","a","async","Axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","Contenedor","div","Precio","Info","Cotizacion","cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Imagen","img","Heading","h1","App","guardarCotizacion","cargando","guardarCargando","url","axios","setTimeout","DISPLAY","consultarApi","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcf7ce0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, {Fragment, useState} from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display:block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border:none;\r\n    font-size: 1.2rem;\r\n`;\r\nconst useMoneda = (label, stateInicial, opciones)=>{\r\n\r\n    // State de nuestro custum hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n    const Seleccionar = ()=>(\r\n        <Fragment>\r\n            <Label> {label}</Label>\r\n\r\n            <Select\r\n                onChange={e =>actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n            <option value=\"\">-- Seleccione --</option>\r\n                {opciones.map(opcion =>(\r\n<option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    // Retornar state, interfaz y función que modifica el state\r\n    return [state,Seleccionar];\r\n}\r\n\r\nexport default useMoneda;","import React, {Fragment, useState} from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display:block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border:none;\r\n    font-size: 1.2rem;\r\n`;\r\nconst useCriptomoneda = (label, stateInicial, opciones)=>{\r\n    // State de nuestro custum hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n    const SelectCripto = ()=>(\r\n        <Fragment>\r\n            <Label> {label}</Label>\r\n\r\n            <Select\r\n                onChange={e =>actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n            <option value=\"\">-- Seleccione --</option>\r\n                {opciones.map(opcion =>(\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    // Retornar state, interfaz y función que modifica el state\r\n    return [state,SelectCripto];\r\n}\r\n\r\nexport default useCriptomoneda;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 2rem;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    color: #FFF;\r\n    font-size: 30px;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (\r\n        <MensajeError>{mensaje}</MensajeError>\r\n    );\r\n};\r\n\r\nexport default Error;","import React,{useState,useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport useCriptomoneda from '../hooks/useCriptomoneda';\r\nimport Error from './Error';\r\nimport Axios from 'axios';\r\n\r\nconst Boton = styled.input`\r\n    margin-top:20px;\r\n    margin-bottom: 1rem;\r\n    font-weight:bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66a2fe;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    color: #FFF;\r\n    transition: background-color .3s ease;\r\n\r\n    &:hover{\r\n        background-color: #326AC0;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Formulario = ({guardarMoneda, guardarCriptomoneda}) => {\r\n    //State del listado de criptomonedas\r\n    const [listaCripto, guardarListaCripto] = useState([]);\r\n    const [error, guardarError] = useState(false);\r\n\r\n    const MONEDAS = [\r\n        {codigo: 'USD', nombre:'Dolar de Estados Unidos'},\r\n        {codigo: 'MXN', nombre:'Peso Mexicano'},\r\n        {codigo: 'EUR', nombre:'Euro'},\r\n        {codigo: 'GBP', nombre:'Libra esterlina'}\r\n    ];\r\n    // Utilizar Cripomoneda\r\n    const [criptomoneda ,SelectCripto] = useCriptomoneda('Elige tu criptomoneda','',listaCripto);\r\n    // Utilizar useMoneda\r\n    const [moneda,SelectMonedas] = useMoneda('Elige tu moneda','', MONEDAS);\r\n    \r\n    //Ejecutar llamado a la API\r\n    useEffect(()=>{\r\n        const consultarAPI = async()=>{\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n            const resultado = await Axios.get(url);\r\n            guardarListaCripto(resultado.data.Data);\r\n        }\r\n        consultarAPI();\r\n    },[]);\r\n\r\n    const cotizarMoneda = e =>{\r\n        e.preventDefault();\r\n\r\n        // validar si ambos campos están llenos\r\n        if(moneda ==='' || criptomoneda===''){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        //  pasar los datos al componente principal\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n        // Pasar el error a false\r\n        guardarError(false);\r\n    }\r\n    \r\n    return (\r\n        <form\r\n            onSubmit={cotizarMoneda}\r\n        >\r\n            {error ? <Error mensaje='todos los campos son obligatorios'/> : null}\r\n            <SelectMonedas />\r\n            <SelectCripto/>\r\n            <Boton \r\n                type=\"submit\"\r\n                value=\"Calcular\" \r\n            />\r\n\r\n        </form>\r\n    ); \r\n};\r\n\r\nexport default Formulario;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Contenedor = styled.div`\r\n    color: white;\r\n    padding-top: 1rem;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    \r\n`;\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n\r\n    span{\r\n        font-weight:bold;\r\n    }\r\n`;\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n\r\n    span{\r\n        font-weight:bold;\r\n    }\r\n`;\r\nconst Cotizacion = ({ cotizacion }) => {\r\n  // Si la cotización llega vacía no se ejecuta nada\r\n  if (Object.keys(cotizacion).length === 0) return null;\r\n  console.log(cotizacion);\r\n\r\n  return (\r\n    <Contenedor>\r\n      <Precio> El precio es: <span>{cotizacion.PRICE}</span></Precio>\r\n      <Info> Precio más alto del día: <span>{cotizacion.HIGHDAY}</span></Info>\r\n      <Info> Precio más bajo del día: <span>{cotizacion.LOWDAY}</span></Info>\r\n      <Info> Variación últimas 24 horas: <span>{cotizacion.CHANGEPCT24HOUR}</span></Info>\r\n      <Info> Última actualización: <span>{cotizacion.LASTUPDATE}</span></Info>\r\n    </Contenedor>\r\n  );\r\n};\r\n\r\nexport default Cotizacion;\r\n","import React from \"react\";\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div class=\"sk-folding-cube\">\r\n      <div class=\"sk-cube1 sk-cube\"></div>\r\n      <div class=\"sk-cube2 sk-cube\"></div>\r\n      <div class=\"sk-cube4 sk-cube\"></div>\r\n      <div class=\"sk-cube3 sk-cube\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport imagen from \"./cryptomonedas.png\";\nimport Formulario from \"./components/Formulario\";\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from \"./components/Spinner\";\nimport axios from \"axios\";\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, guardarMoneda] = useState(\"\");\n  const [criptomoneda, guardarCriptomoneda] = useState(\"\");\n  const [cotizacion, guardarCotizacion] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n    // consultar la api para obtener la cotizacion\n    const consultarApi = async () => {\n      // se evita la ejecución por primera vez\n      if (moneda === \"\") return;\n\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n      const resultado = await axios.get(url);\n      // Mostrar Spinner de Cargando\n      guardarCargando(true);\n      setTimeout(()=>{\n        guardarCargando(false);\n        guardarCotizacion(resultado.data.DISPLAY[criptomoneda][moneda]);\n      },3000);\n    };\n    consultarApi();\n  }, [moneda, criptomoneda]);\n\n  //Mostrar Spinner o resultado\n  const componente = (cargando) ? <Spinner/> : <Cotizacion cotizacion = {cotizacion}/> \n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt=\"imagen cripto\" />\n      </div>\n      <div>\n        <Heading>Cotiza Criptomonedas al instante</Heading>\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}